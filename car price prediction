import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline
from sklearn.metrics import r2_score
import pickle
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

import pandas as pd
import io

file_path = "C:/Users/ASUS/Downloads/carprice.csv"

# Initialize an empty list to store valid lines
valid_lines = []

# Read the file line by line and handle parsing errors
with open(file_path, 'r', encoding='latin1') as file:
    for i, line in enumerate(file):
        # Replace or remove NULL bytes
        line = line.replace('\x00', '')  # Replace NULL bytes with an empty string
        try:
            pd.read_csv(io.StringIO(line), engine='c')  # Check if the line can be parsed
            valid_lines.append(line)
        except (pd.errors.ParserError, pd.errors.EmptyDataError) as e:
            print(f"Skipped line {i + 1} due to parsing error.")

# Print the problematic line from the CSV file if it exists
if len(valid_lines) > 2466:
    problematic_line = valid_lines[2466]
    print(f"Problematic line (line 2467): {problematic_line}")
else:
    print("Not enough lines in the file.")
# Concatenate valid lines into a single string and try to read with pandas
try:
    car = pd.read_csv(io.StringIO('\n'.join(valid_lines)), encoding='latin1', engine='python')
    # Continue with the rest of your code here
except pd.errors.ParserError as e:
    print(f"Error parsing CSV: {e}")

# Creating backup copy
backup = car.copy()

# Data Cleaning
# Remove rows where 'year' is non-numeric
car = car[car['year'].astype(str).str.isnumeric()]

# Change 'year' to integer
car['year'] = car['year'].astype(int)

# Remove rows where 'Price' is 'Ask For Price'
car = car[car['Price'] != 'Ask For Price']

# Remove commas and convert 'Price' to integer
car['Price'] = car['Price'].str.replace(',', '').astype(int)

# Extract numerical part and convert 'kms_driven' to integer
car['kms_driven'] = car['kms_driven'].str.split().str.get(0).str.replace(',', '')
car = car[car['kms_driven'].astype(str).str.isnumeric()]
car['kms_driven'] = car['kms_driven'].astype(int)

# Remove rows with missing values in 'fuel_type'
car = car[~car['fuel_type'].isna()]

# Remove rows with 'Petrol' in 'kms_driven'm
car = car[~car['kms_driven'].astype(str).str.contains('Petrol')]

# Remove spam data from 'name' and 'company', keep the first three words in 'name'
car['name'] = car['name'].str.split().str.slice(start=0, stop=3).str.join(' ')

# Resetting the index
car = car.reset_index(drop=True)

# Cleaned Data
print(car)

# Save cleaned data to a new CSV file
car.to_csv('Cleaned_Car_data.csv', index=False)

# EDA - Exploratory Data Analysis
# Checking the relationship of Company with Price
plt.subplots(figsize=(15, 7))
ax = sns.boxplot(x='company', y='Price', data=car)
ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha='right')
plt.show()

# Checking the relationship of Year with Price
plt.subplots(figsize=(20, 10))
ax = sns.swarmplot(x='year', y='Price', data=car)
ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha='right')
plt.show()

# Checking the relationship of kms_driven with Price
sns.relplot(x='kms_driven', y='Price', data=car, height=7, aspect=1.5)
plt.show()

# Checking the relationship of Fuel Type with Price
plt.subplots(figsize=(14, 7))
sns.boxplot(x='fuel_type', y='Price', data=car)
plt.show()

# Relationship of Price with FuelType, Year, and Company mixed
ax = sns.relplot(x='company', y='Price', data=car, hue='fuel_type', size='year', height=7, aspect=2)
ax.set_xticklabels(rotation=40, ha='right')
plt.show()

# Extracting Training Data
X = car[['name', 'company', 'year', 'kms_driven', 'fuel_type']]
y = car['Price']

# Applying Train Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Creating an OneHotEncoder object to contain all the possible categories
ohe = OneHotEncoder()
ohe.fit(X[['name', 'company', 'fuel_type']])

# Creating a column transformer to transform categorical columns
column_trans = make_column_transformer(
    (OneHotEncoder(categories=ohe.categories_), ['name', 'company', 'fuel_type']),
    remainder='passthrough'
)

# Linear Regression Model
lr = LinearRegression()

# Making a pipeline
pipe = make_pipeline(column_trans, lr)

# Fitting the model
pipe.fit(X_train, y_train)
y_pred = pipe.predict(X_test)

# Checking R2 Score
r2 = r2_score(y_test, y_pred)
print(f"R2 Score: {r2}")

# Finding the model with a random state of TrainTestSplit where the model was found to give almost 0.92 as r2_score
scores = []
for i in range(1000):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=i)
    lr = LinearRegression()
    pipe = make_pipeline(column_trans, lr)
    pipe.fit(X_train, y_train)
    y_pred = pipe.predict(X_test)
    scores.append(r2_score(y_test, y_pred))

# Get the index and value of the best score
best_index = np.argmax(scores)
best_score = scores[best_index]
print(f"Best R2 Score: {best_score} at random state: {best_index}")

# Saving the best model
pickle.dump(pipe, open('LinearRegressionModel.pkl', 'wb'))

# Making predictions with the best model
sample_data = pd.DataFrame(columns=['name', 'company', 'year', 'kms_driven', 'fuel_type'],
                            data=np.array(['Maruti Suzuki Swift', 'Maruti', 2019, 100, 'Petrol']).reshape(1, 5))
predicted_price = pipe.predict(sample_data)
print(f"Predicted Price: {predicted_price}")
